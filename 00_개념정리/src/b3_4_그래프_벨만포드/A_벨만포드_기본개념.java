package b3_4_그래프_벨만포드;

public class A_벨만포드_기본개념 {
	/*
	 * [벨만 포드(Bellman-Ford)]
	 *  - 최단경로를 찾는 알고리즘(다익스트라와 동일)
	 *  - 음수 가중치를 갖는 간선이 있어도 사용 가능
	 *   : 경로의 길이가 음수인 음수 사이클이 있는지 확인 가능
	 *  - 시간복잡도: O(VE) (V: 정점의 수, E: 간선의 수)
	 *  - 절차
	 *   1. 그래프에 간선 정보 저장
	 *   2. 시작 정점 결정
	 *   3. 시작 정점을 제외한 모든 정점까지의 거리를 무한대로 설정
	 *   4. 모든 간선을 확인하며 간선의 출발점까지의 거리가 무한대가 아니고 
	 *      출발점을 거쳐서 도착점으로 이동시의 거리가 이미 저장된 거리보다 짧은 경우 거리 갱신
	 *      dist[v] > dist[u] + w => dist[v] = dist[u] + w
	 *   5. 이 과정은 V-1회 수행 (V: 정점의 수)
	 *     : V-1회 반복은 V개의 정점으로 구성된 그래프에서 가질 수 있는 최대 간선의 수는 V-1개
	 *   6. 음수 사이클 확인을 위해 한 번 더 수행
	 *      이 과정에서 거리가 갱신되는 점이 있다면 음수 사이클 존재
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
